--- libvirt-3.9.0/gnulib/lib/xalloc-oversized.h.omv~	2017-11-02 22:36:37.445493359 +0100
+++ libvirt-3.9.0/gnulib/lib/xalloc-oversized.h	2017-11-02 22:37:09.992890377 +0100
@@ -41,7 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#if 7 <= __GNUC__ && (!defined(__clang__) || __has_builtin(__builtin_mul_overflow_p))
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
--- libvirt-3.9.0/gnulib/lib/intprops.h.omv~	2017-11-02 22:43:03.075920806 +0100
+++ libvirt-3.9.0/gnulib/lib/intprops.h	2017-11-02 22:44:34.147982563 +0100
@@ -226,7 +226,7 @@
 #endif
 
 /* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
+#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__) && (!defined(__clang__) || __has_builtin(__builtin_mul_overflow_p))
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
--- libvirt-3.9.0/src/internal.h.omv~	2017-11-02 22:44:44.958878024 +0100
+++ libvirt-3.9.0/src/internal.h	2017-11-02 22:45:10.259638589 +0100
@@ -177,7 +177,7 @@
 # endif
 
 # ifndef ATTRIBUTE_FALLTHROUGH
-#  if __GNUC_PREREQ (7, 0)
+#  if __GNUC_PREREQ (7, 0) && __has_attribute(fallthrough)
 #   define ATTRIBUTE_FALLTHROUGH __attribute__((fallthrough))
 #  else
 #   define ATTRIBUTE_FALLTHROUGH do {} while(0)
